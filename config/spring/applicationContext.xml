<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	>
	<!-- 采用注释的方式配置bean -->
	<context:annotation-config />
	<!-- 配置要扫描的包 -->


	<context:component-scan base-package="com.huiting.manage.dao" />
	<context:component-scan base-package="com.huiting.manage.services" />
	<context:component-scan base-package="com.huiting.manage.system.task" />
	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="com.huiting.manage.system.util.PropertiesUtil">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 数据库标准配置 -->
				<value>classpath*:common/jdbc.properties</value>
				<value>classpath*:common/other.properties</value>
				<!-- <value>classpath*:falsh/FalshConfig.properties</value> -->
				<!-- 本地开发环境配置 <value>classpath*:config/common/jdbc.local.properties</value> -->
				<!-- 上传文件配置 <value>classpath*:config/common/upload.properties</value> -->
			</list>
		</property>
	</bean>

	<!-- 导入属性配置文件 -->
	<!--< context:property-placeholder location = "classpath:jdbc.properties" 
		/> -->

	<!-- 大对象处理器 <bean id="lobHandler" lazy-init="true" class="org.springframework.jdbc.support.lob.DefaultLobHandler" 
		/> -->
	<!-- 配置c3p0数据源 -->
	<bean id="PICCADataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="100" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="1" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="30" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="true" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

	<!-- 解决多数据源 -->
	<bean id="dynamicDataSource" class="com.huiting.manage.system.datasource.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="piccA" value-ref="PICCADataSource"></entry>
				<!-- <entry key="piccB" value-ref="PICCBDataSource"></entry> -->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="PICCADataSource">
		</property>
	</bean>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 <property name="configLocation" 
			value="classpath:mybatis/mybatis-config.xml"></property> -->
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
		<property name="typeAliasesPackage" value="com.huiting.manage.dto" />
		<property name="mapperLocations" value="classpath:mybatis/**/*Mapper.xml"></property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!--- 如果想要进行批量操作可加入这个属性 <constructor-arg index="1" value="BATCH" /> -->
	</bean>
 
	<!-- 事务的配置 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	<!-- 配置事务控制   -->
     <tx:annotation-driven transaction-manager="txManager" /> 
    
	<!-- <tx:advice>：事务通知定义，用于指定事务属性，其中“transaction-manager”属性指定事务管理器，并通过< tx:attributes 
		>指定具体需要拦截的方法 <tx:method name="save*">：表示将拦截以save开头的方法，被拦截的方法将应用配置的事务属性： propagation="REQUIRED"表示传播行为是Required，isolation="READ_COMMITTED"表示隔离级别是提交读； 
		<tx:method name="*">：表示将拦截其他所有方法，被拦截的方法将应用配置的事务属性： propagation="REQUIRED"表示传播行为是Required，isolation="READ_COMMITTED"表示隔离级别是提交读，read-only="true"表示事务只读； -->
 	 <tx:advice id="txAdvice" transaction-manager="txManager"> 
		<tx:attributes>
 			<tx:method name="find*" propagation="SUPPORTS" read-only="true" 
 				timeout="20" /> 
			<tx:method name="add*" propagation="REQUIRED" timeout="20" /> 
 			<tx:method name="update*" propagation="REQUIRED" timeout="20" /> 
 			<tx:method name="delete*" propagation="REQUIRED" timeout="20" /> 
 			<tx:method name="*" /> 
 		</tx:attributes> 
 	</tx:advice> 

	<!-- |第一个 * —— 通配 任意返回值类型 | |第二个 * —— 通配 包com.huiting.manage.service下的任意class 
		| |第三个 * —— 通配 包com.huiting.manage.service下的任意class的任意方法 | |第四个 .. —— 通配 方法可以有0个或多个参数| 
		<aop:config>：AOP相关配置： <aop:pointcut/>：切入点定义，定义名为"serviceMethod"的aspectj切入点， 
		切入点表达式为"execution(* cn..chapter9.service..*.*(..))"表示拦截cn包及子包下的chapter9. 
		service包及子包下的任何类的任何方法； <aop:advisor>：Advisor定义，其中切入点为serviceMethod，通知为txAdvice。 
		从配置中可以看出，将对cn包及子包下的chapter9. service包及子包下的任何类的任何方法应用“txAdvice”通知指定的事务属性。 -->
  	<aop:config> 
 		<aop:pointcut id="serviceTransaction" 
 			expression="execution(* com.huiting.manage.services.*.*.*(..))" /> 
 		<aop:advisor  pointcut-ref="serviceTransaction" advice-ref="txAdvice" /> 
 	</aop:config> 


</beans>